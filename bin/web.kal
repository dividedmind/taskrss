#!/usr/bin/env kal

env = process.env.NODE_ENV or 'dev'

fs = require 'fs'
express = require 'express'
jade = require 'jade'
googleapis = require 'googleapis'
crypto = require 'crypto'

firebase = new(require('firebase'))(process.env.FIREBASE_URL)
tokenGenerator = new(require("firebase-token-generator"))(process.env.FIREBASE_SECRET)
token = tokenGenerator.createToken { app: "taskrss" }, { debug: env == 'dev' }
firebase.auth token, function(error)
  if error
    print "Firebase login failed! #{error}"

app = express()

app.use express.logger()
app.use express.compress()
app.use express.cookieParser()
app.set "views", "templates"
app.set "view engine", "jade"
app.locals.title = "Taskrss"
app.locals.tagline = "Google Tasks to RSS bridge"

task render_kal(filename, cb)
  wait for content from fs.readFile filename, 'utf8'
  return kal.compile content, {filename:filename}

kal = require 'kal'
compile = require 'compile-middleware'
app.use compile { filename: /(.*)\.js/i,
  src_ext: '.kal',
  src: 'assets',
  render: render_kal
}

colors = [ "091001",
          "060804",
          "030500",
          "76A93A",
          "89A964",

          "01070C",
          "030506",
          "000203",
          "407DA7",
          "678DA7",

          "120A01",
          "090705",
          "050300",
          "AA793A",
          "AA8C64",

          "100106",
          "080405",
          "050002",
          "A93A65",
          "A9647F",
]
function random_color()
  return "#" + colors[Math.floor(Math.random() * colors.length)]

less = require('less').Parser

task render_less(filename)
  options = { filename: filename, paths: ["templates"] }
  
  parser = new(less) options
  wait for content from fs.readFile filename, 'utf8'
  
  new_content = nothing
  while new_content != content
    content = new_content if new_content exists
    new_content = content.replace "@color", random_color()
  
  wait for tree from parser.parse content
  return tree.toCSS()

app.use compile { filename: /(.*)\.css/i,
  src_ext: '.less',
  src: 'styles',
  render: render_less,
  headers: { 'Content-Type': 'text/css' }
}

function setup_feeds(req, res)
  refresh_token = req.cookies.refresh_token
  access_token = req.cookies.access_token
  
  hash = crypto.createHash("md5").update(refresh_token).digest('hex')
  
  data = firebase.child hash
  data.set { refresh_token: refresh_token }
  data.set { access_token: access_token } if access_token exists
  
  res.locals.feed_new = base_url(req) + "/tasks/#{hash}/new"
  res.locals.feed_done = base_url(req) + "/tasks/#{hash}/completed"

app.get '/', (req, res) ->
  res.setHeader 'Content-Type', 'text/html'
  template = "frontpage"
  if req.cookies.refresh_token
    setup_feeds req, res
    template = "feeds"
  wait for html from res.render template
  res.send html

port = process.env.PORT or 5000

oauth2client_ = nothing

function base_url(req)
  host = req.host
  host += ":5000" if host is "localhost"
  return req.protocol + '://' + host

function oauth2client(req)
  if oauth2client_ doesnt exist
    callback_url = base_url(req) + "/oauth2callback"
    oauth2client_ = new googleapis.OAuth2Client process.env.G_CLIENT_ID, process.env.G_CLIENT_SECRET, callback_url
  return oauth2client_

app.get '/login', function(req, res)
  client = oauth2client req
  url = client.generateAuthUrl { access_type: 'offline', 
                                scope: 'https://www.googleapis.com/auth/tasks.readonly',
                                approval_prompt: 'force' }
  res.redirect url

app.get '/oauth2callback', function(req, res)
  client = oauth2client req
  wait for token from client.getToken req.query.code
  res.cookie 'access_token', token.access_token, { maxAge: token.expires_in * 1000, httpOnly: true }
  res.cookie 'refresh_token', token.refresh_token, { maxAge: 3e10, httpOnly: true }
  res.redirect '/'

app.listen port

print "Listening on port #{port}"
