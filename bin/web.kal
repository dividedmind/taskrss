#!/usr/bin/env kal

fs = require 'fs'
express = require 'express'
jade = require 'jade'
googleapis = require 'googleapis'

app = express()

app.use express.logger()

task render_kal(filename, cb)
  wait for content from fs.readFile filename, 'utf8'
  return kal.compile content, {filename:filename}

kal = require 'kal'
compile = require 'compile-middleware'
app.use compile { filename: /(.*)\.js/i,
  src_ext: '.kal',
  src: 'assets',
  render: render_kal
}

colors = [ "091001",
          "060804",
          "030500",
          "76A93A",
          "89A964",

          "01070C",
          "030506",
          "000203",
          "407DA7",
          "678DA7",

          "120A01",
          "090705",
          "050300",
          "AA793A",
          "AA8C64",

          "100106",
          "080405",
          "050002",
          "A93A65",
          "A9647F",
]
function random_color()
  return "#" + colors[Math.floor(Math.random() * colors.length)]

less = require('less').Parser

task render_less(filename)
  options = { filename: filename, paths: ["templates"] }
  
  parser = new(less) options
  wait for content from fs.readFile filename, 'utf8'
  
  new_content = nothing
  while new_content != content
    content = new_content if new_content exists
    new_content = content.replace "@color", random_color()
  
  wait for tree from parser.parse content
  return tree.toCSS()

app.use compile { filename: /(.*)\.css/i,
  src_ext: '.less',
  src: 'styles',
  render: render_less,
  headers: { 'Content-Type': 'text/css' }
}

function render(name, cb)
  filename = "templates/#{name}.jade"
  options = { filename: filename, pretty: true }
  jade.renderFile filename, options, cb

app.get '/', (req, res) ->
  res.setHeader 'Content-Type', 'text/html'
  wait for content from render "frontpage"
  res.send content

port = process.env.PORT or 5000

app.get '/login', function(req, res)
  host = req.host
  host += ":5000" if host is "localhost"
  callback_url = req.protocol + '://' + host + "/oauth2callback"
  client = new googleapis.OAuth2Client process.env.G_CLIENT_ID, process.env.G_CLIENT_SECRET, callback_url
  url = client.generateAuthUrl { access_type: 'offline', scope: 'https://www.googleapis.com/auth/tasks.readonly' }
  res.redirect url

app.listen port

print "Listening on port #{port}"
