(function(){function printLine(line){process.stdout.write(line+"\n")}function printWarn(line){process.stderr.write(line+"\n")}function parseOptions(){var BANNER;return BANNER="Usage: kal [options] SOURCE [-o OUTPUT_DIR]\n\n",BANNER+="If called without the -o option, `kal` will run SOURCE.\n",BANNER+="If called without any options, `kal` will start an interactive session.\n",optimist=optimist.usage(BANNER),optimist=optimist.options("help",{alias:"h","boolean":!0,description:"show the command line usage options"}),optimist=optimist.options("tokens",{alias:"t","boolean":!0,description:"print out the tokens that the lexer/sugarer produce"}),optimist=optimist.options("javascript",{alias:"j","boolean":!0,description:"print out the compiled javascript"}),optimist=optimist.options("bare",{alias:"b","boolean":!0,description:"don't wrap the output in a function"}),optimist=optimist.options("version",{alias:"v","boolean":!0,description:"display the version number"}),optimist=optimist.options("output",{alias:"o",description:"the output directory for the compiled source"}),optimist=optimist.options("format",{alias:"f",description:"the output format, one of: minify, concise, beautify (default)"}),optimist.argv}function compile_files(filenames,output_dir,options,format){var stat,new_outdir,subfiles,child,js_output,js_filename,ki$2,kobj$2,filename;for(kobj$2=filenames,ki$2=0;kobj$2.length>ki$2;ki$2++)filename=kobj$2[ki$2],stat=fs.statSync(filename),stat.isDirectory()?(new_outdir=path.join(output_dir,path.basename(filename)),fs.mkdirSync(new_outdir,stat.mode),subfiles=$kcomprl(fs.readdirSync(filename),function($ki){return child=$ki,path.join(filename,child)}),compile_files(subfiles,new_outdir,options,format)):".kal"===path.extname(filename)&&(options.filename=filename,options.module_name=path.basename(filename,".kal"),js_output=Kal.compile(fs.readFileSync(filename),options),"minify"===format?js_output=require("uglify-js").minify(js_output,{fromString:!0,mangle:!1}).code:"concise"!==format&&(js_output=require("uglify-js").minify(js_output,{fromString:!0,mangle:!1,output:{beautify:!0}}).code),options.javascript?printLine(js_output):void 0,js_filename=path.join(output_dir,path.basename(filename,".kal"))+".js",fs.writeFileSync(js_filename,js_output))}function version(){printLine("Kal version "+Kal.VERSION),process.exit(0)}function usage(){optimist.showHelp(),process.exit(2)}var fs,path,optimist,Kal,existsSync,run,$kcomprl=function(iterable,func){var o=[];if(iterable instanceof Array)for(var i=0;iterable.length>i;i++)o.push(func(iterable[i]));else{if("function"!=typeof iterable.next)throw"Object is not iterable";for(var i;null!=(i=iterable.next());)o.push(func(i))}return o};fs=require("fs"),path=require("path"),optimist=require("optimist"),Kal=require("./kal"),existsSync=fs.existsSync||path.existsSync,run=function run(){var options,compile_options,files,file,ki$1,kobj$1,filename;if(options=parseOptions(),options.version)return version();if(optimist.argv.help)return usage();if(null!=options.output&&!existsSync(options.output))return printWarn("output path does not exist!"),usage();if(0===options._.length)return require("./interactive");if(process.argv[0]="kal",process.execPath=require.main.filename,compile_options={},compile_options.show_tokens=options.tokens,compile_options.bare=!1,compile_options.show_js=options.javascript,null!=options.output)1===options._.length&&fs.statSync(options._[0]).isDirectory()?(files=$kcomprl(fs.readdirSync(options._[0]),function($ki){return file=$ki,path.join(options._[0],file)}),compile_files(files,options.output,compile_options,options.format)):compile_files(options._,options.output,compile_options,options.format);else for(kobj$1=options._,ki$1=0;kobj$1.length>ki$1;ki$1++)filename=kobj$1[ki$1],Kal.eval(fs.readFileSync(filename),compile_options)},exports.run=run})();